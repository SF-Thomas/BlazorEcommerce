@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                    <input type="number" value="@product.Quantity"
                    @onchange="@((ChangeEventArgs e) => UpdateQuantityAsync(e, product))"
                   class="form-control input-quantity"
                   min="1" />
                    <button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCartAsync(product.ProductId, product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * product.Quantity)
        </div>
    </div>
    @if (isAuthenticated)
    {
        <div>
            <h5>Delivery Address</h5>
            <AddressForm />
        </div>
    }
    <button @onclick="PlaceOrderAsync" class="btn alert-success float-end mt-1">Checkout</button>
}



@code {
    List<CartProductResponse> cartProducts = new List<CartProductResponse>();
    string message = "Loading cart...";
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticatedAsync();
        await LoadCartAsync();
    }

    private async Task RemoveProductFromCartAsync(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCartAsync(productId, productTypeId);
        await LoadCartAsync();
    }

    private async Task LoadCartAsync()
    {
        await CartService.GetCartItemsCountAsync();
        cartProducts = await CartService.GetCartProductsAsync();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantityAsync(ChangeEventArgs e, CartProductResponse product)
    {
        if (e.Value is null)
            return;

        if (int.TryParse(e.Value.ToString(), out int quantity))
        {
            product.Quantity = quantity;
            if (product.Quantity < 1)
                product.Quantity = 1;

            await CartService.UpdateQuantityAsync(product);
        }
    }

    private async Task PlaceOrderAsync()
    {
        string url = await OrderService.PlaceOrderAsync();
        NavigationManager.NavigateTo(url);
    }
}
